<?php
/*
 *  create database tables and columns
 */
function tripal_diamond_install() {
    
    /*
     *  Populate the diamond_settings table with a default row.
     */
    $tseq_settings = array(
        'settings_id'               => '0',
        'num_threads'               => '1',
        'file_expire_time'          => '30',
        'blast_exe_location'        => '',
        'diamond_exe_location'      => '',
        'preferred_remote_resource' => '',       
    );
    
    drupal_write_record('tseq_settings', $tseq_settings);
    
    /*
     *  Populate the diamond_categories table with default categories.
     *      Protein, Gene, and Genome (all enabled by default)
     */
    
    $tseq_category_standard = array(
        'category_title'            =>'Standard',
        'enabled'                   => '1'
    );
    drupal_write_record('tseq_categories', $tseq_category_standard);
    
    
    /*Create the content type in which will store the information for the
     *existing Diamond databases
     */
    /*
 
    $t = get_t();
    
    $content_type = array(
        'type'          =>  'diamond_database',
        'name'          =>  $t('DiamondDatabase'),
        'description'   =>  $t('Diamond Database for use with the Tripal Sequence Similarity Search module'),
        'title_label'   =>  $t('Database name'),
        'base'          =>  'node_content',
        'custom'        =>  TRUE
    );
    
    $node_type = node_type_set_defaults($content_type);
    node_type_save($node_type);
    
    $fields = array(
        //Name
        'diamonddb_name'    =>  array(
            'field_name'    =>  'diamonddb_name',
            'type'          =>  'text',
            'cardinality'   =>  1,
        ),
        //Type
        'diamonddb_type'    =>  array(
            'field_name'    =>  'diamonddb_type',
            'type'          =>  'text',
            'cardinality'   =>  1,
        ),
        //Version
        'diamonddb_version' =>  array(
            'field_name'    =>  'diamonddb_version',
            'type'          =>  'text',
            'cardinality'   =>  1,
        ),
        //Location
        'diamonddb_location'=>  array(
            'field_name'    =>  'diamonddb_location',
            'type'          =>  'text',
            'cardinality'   =>  1,
        ),
    );
    
    foreach( $fields as $field) {
        field_create_field($field);
    }
    
    
    $typeFields = array(
        //Name
        'diamonddb_name'    =>  array(
            'field_name'    =>  'diamonddb_name',
            'lable'         =>  $t('Name'),
            'required'      =>  TRUE,
            'widget'        =>  array(
                'type'  =>  'text_textfield'
            ),
        ),
        //Type
        'diamonddb_type'    =>  array(
            'field_name'    =>  'diamonddb_type',
            'lable'         =>  $t('Type'),
            'required'      =>  TRUE,
            'widget'        =>  array(
                'type'  =>  'text_textfield'
            ),
        ),
        //Version
        'diamonddb_version'    =>  array(
            'field_name'    =>  'diamonddb_version',
            'lable'         =>  $t('Version'),
            'required'      =>  TRUE,
            'widget'        =>  array(
                'type'  =>  'text_textfield'
            ),
        ),
        //Location
        'diamonddb_location'    =>  array(
            'field_name'    =>  'diamonddb_location',
            'lable'         =>  $t('Location'),
            'required'      =>  TRUE,
            'widget'        =>  array(
                'type'  =>  'text_textfield'
            ),
        ),
    );
    
    foreach( $typeFields as $typeField ) {
        $typeField['entity_type']   =   'node';
        $typeField['bundle']        =   'diamond_database';
        
        field_create_instance($typeField);
    }
     * 
     */
}

    /*
     * Be nice, prevent clutter by uninstalling the content type
     * 
     * Is it possible to remove the content type but keep nodes in place
     * in the event of a reinstall/accidental uninstall?
     */
function tripal_diamond_uninstall() {
    $query = 'SELECT nid FROM {node} WHERE {node}.type = :type ';
    
    $result = db_query($query, array(':type'   => 'diamond_database'));
    
    $nids = array();
    
    foreach( $result as $row )
    {
        $nids[] = $row->nid;
    }
    
    node_delete_multiple( $nids );
    
    foreach (field_info_instances('node', 'diamond_database') as $field_name => $instance )
    {
        field_delete_instance($instance);
    }
    
    node_type_delete('diamond_database');
    
    field_purge_batch(1000);
}

function tripal_diamond_schema() {
    $schema['tseq_jobs'] = array(
        'description' => t('TSeq Jobs'),
        'fields' => array(
            'job_id' => array(
                'description' => t('Primary key'),
                'type' => 'serial',
                'unsigned' => true,
                'not null' => true,
            ),
            'tripal_job_id' => array(
                'description' => t('Tied to Tripal Job ID'),
                'type' => 'int',
                'unsigned' => true,
                'not null' => true,
            ),
            'name' => array(
                'description' => t('name of job'),
                'type' => 'serial',
                'unsigned' => true,
                'not null' => true,
            ),
            'submitter' => array(
                'description' => t('user who submitted the job'),
                'type' => 'varchar',
                'length' => 15,
                'not null' => true,
            ),
            'status' => array(
                'description' => t('status of the job'),
                'type' => 'varchar',
                'length' => 15,
                'not null' => true,
            ),
            'last_check' => array(
                'description' => t('time of last progress check'),
                'type' => 'int',
                'unsigned' => true,
                'not null' => true,
            ),
            'progress' => array(
                'description' => t('progress of job at last check'),
                'type' => 'varchar',
                'length' => 15,
                'not null' => true,
            ),
            'start_date' => array(
                'description' => t('date when the job was initiated'),
                'type' => 'varchar',
                'length' => '15',
                'not null' => true,
            ),
            'end_date' => array(
                'description' => t('date when the job was ended (after last check aka first /complete/ check'),
                'type' => 'varchar',
                'length' => 15,
                'not null' => true,
            ),
        ),
    );
            
    $schema['tseq_job_information'] = array(
        'description' => t('TSeq Job Information'),
        'fields' => array(
            'tseq_job_id' => array(
                'description' => t('Primary key'),
                'type' => 'serial',
                'unsigned' => true,
                'not null' => true,
            ),
            'tripal_job_id' => array(
                'description' => t('Tied to Tripal Job ID'),
                'type' => 'int',
                'unsigned' => false,
                'not null' => true,
            ),
            'user_id' => array(
                'description' => t('User ID of the submitting user'),
                'type' => 'int',
                'unsigned' => true,
                'not null' => true,
            ),
            'submit_time' => array(
                'description' => 'Date and time submitted (UNIX time)',
                'type' => 'int',
                'not NULL' => true,
            ),
            'sequence_query_type' => array(
                'description' => 'Type of Query (Protein, Nucleotide)',
                'type' => 'varchar',
                'length' => 31,
                'not NULL' => true,
            ),
            'database_search_type' => array(
                'description' => 'Type of Target for search (Protein, Nucleotide)',
                'type' => 'varchar',
                'length' => 31,
                'not NULL' => true,
            ),
            'sequence_file_type' => array(
                'description' => 'How the sequence was provided (paste, upload)',
                'type' => 'varchar',
                'length' => 31,
                'not NULL' => true, 
            ),
            'database_file_type' => array(
                'description' => 'How the database was provided (database, paste, upload)',
                'type' => 'varchar',
                'length' => 31,
                'not NULL' => true, 
            ),
            'sequence_file' => array(
                'description' => 'filename of the provided sequence (without path)',
                'type' => 'varchar',
                'length' => 255,
                'not NULL' => true,
            ),
            'database_file' => array(
                'description' => 'filename of the provided database (without path)',
                'type' => 'varchar',
                'length' => 255,
                'not NULL' => true,
            ),
            'command' => array(
                'description' => 'The assembled command to run on the remote machine',
                'type' => 'varchar',
                'length' => 511,
                'not NULL' => true,
            )
        ),
    );
    
    $schema['tseq_db_existing_locations'] = array(
        'description' => t('TSeq Database Locations for Pre-existing databases'),
        'fields' => array(
            'db_id' => array(
                'description' => t('ID of the database (autoincrement)'),
                'type' => 'serial',
                'not null' => true,
            ),
            'type' => array(
                'description' => t('Type of Database (Protein or Nucleotide)'),
                'type' => 'varchar',
                'length' => 31,
                'not null' => true,                
            ),
            'name' => array(
                'description' => t('Name of the database'),
                'type' => 'varchar',
                'length' => 255,
                'not null' => true,
            ),
            'version' => array(
                'description' => t('Version of the stored database'),
                'type' => 'varchar',
                'length' => 31,
            ),
            'location' => array(
                'description' => t('Location on disk where the database file exists'),
                'type' => 'varchar',
                'length' => 512,
                'not null' => true,
            ),
            //Perhaps present this (category) as a list of options, defined by the admin 
            'category' => array(
                'description' => t('Define a category for this database; e.g. TSA, UniGene'),
                'type' => 'varchar',
                'length' => 512,
                'not null' => false,
            ),
            'web_location' => array(
                'description'   => 'Web URL of original sequence if available (optional)',
                'type'          => 'varchar',
                'length'        => 512,
                'not null'      => FALSE,
            )
        ),
    );
    
    $schema['tseq_settings'] = array(
        'description' => t('Administrator settings for Tripal Sequence Similarity Search module'),
        'fields' => array(
            'settings_id' => array(
                'description'   => t('Primary key for drupal_write_record purposes'),
                'type'          => 'int',
                'length'        => 7,
            ),
            'num_threads' => array(
                'description' => t('The number of threads a job is allowed to use on the remote machine.'),
                'type'          => 'int',
                'length'        => 7,
            ),
            'file_expire_time' => array(
                'description'   => t('The number of days to keep files related to a job'),
                'type'          => 'int',
                'length'        => 7,
            ),
            'blast_exe_location' => array(
                'description'   => t('Location on remote machine where the BLAST executables can be found'),
                'type'          => 'varchar',
                'length'        => 255,
            ),
            'diamond_exe_location' => array(
                'description'   => t('Location on remote machine where the Diamond executables can be found'),
                'type'          => 'varchar',
                'length'        => 255,
            ),
            'preferred_remote_resource' => array(
                'description'   => t('ID of the remote resource to use, as specified in the Tripal Remote Resource module'),
                'type'          => 'int',
                'length'        => 7,
            ),
        ),
    );
    
    $schema['tseq_categories'] = array(
        'description' => t('Maintain a list of available categories for Database files'),
        'fields' => array(
            'category_id' => array(
                'description'   => t('Category ID'),
                'type'          => 'serial',
                'length'        => 7
            ),
            'category_title' => array(
                'description'   => t('Title of the category'),
                'type'          => 'varchar',
                'length'        => 127,
            ),
            'enabled'       => array(
                'description'   => t('Is this category enabled on the Submit Job page?'),
                'type'          => 'int',
                'length'        => 1,
            ),
        ),
    );
    
   return $schema;         
}

function tripal_diamond_update_5000()
{
    db_add_field(
        'tseq_db_existing_locations',
        'web_location',
        array(
            'description'   => 'Web URL of original sequence if available (optional)',
            'type'          => 'varchar',
            'length'        => 512,
            'not null'      => FALSE,
        )
    );
}

